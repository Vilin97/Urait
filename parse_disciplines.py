#%%
# Plan
# - (DONE) parse discipline names from study plan
# - (DONE) for each discipline, generate the contents page of a textbook
# - (DONE) embed this contents 
# - (DONE) embed the contents from Urait
# - (DONE) find 10 most similar by cosine similarity
# - (DONE) use an LLM to see if any one them actually covers the discipline

#%%
# parse
import numpy as np
import pandas as pd
from google import genai
from google.genai import types
import httpx
import os
import ast
from dotenv import load_dotenv
import json
#%%
load_dotenv()
api_key = os.getenv("GOOGLE_API_KEY")
client = genai.Client(api_key=api_key)

doc_url = "https://www.rudn.ru/sveden/files/eiu/OOP_NMTbd00r_2025.pdf"

# Retrieve and encode the PDF byte
doc_data = httpx.get(doc_url).content

prompt = "Extract the names of the *core, major* disciplines. Use commas to separate them." # better to prompt in English than Russian
response = client.models.generate_content(
  model="gemini-2.5-flash",
  contents=[
      types.Part.from_bytes(
        data=doc_data,
        mime_type='application/pdf',
      ),
      prompt])

disciplines = response.text.split(", ")
disciplines

#%%
discipline = disciplines[0]
print(discipline)

discipline_example_1 = "ИСТОРИЯ ГОСУДАРСТВА И ПРАВА РОССИИ"
topics_example_1 = ['Введение. Предмет, метод и периодизация истории государства и права России',
       'Древнерусское государство и право',
       'Образование Древнерусского государства', 'Киевская Русь',
       'Возникновение и развитие древнерусского права',
       'Характеристика уголовного права по Русской Правде',
       'Причины феодальной раздробленности русских княжеств',
       'Ростово-Суздальское (Владимиро-Суздальское) княжество',
       'Новгородское и Псковское государства',
       'Право Новгородской и Псковской феодальных республик',
       'Русское государство и право в Средние века', 'Золотая Орда',
       'Влияние Золотой Орды на Русь',
       'Русские княжества в составе княжества Литовского',
       'Формирование Русского централизованного государства',
       'Общественный строй Русского государства (XIV—XVI вв.)',
       'Развитие русского феодального права (XIV—XVI вв.)',
       'Сословно-представительная монархия (XVI—XVII вв.)',
       'Соборное уложение 1649 г.',
       'Характеристика отраслей права в соответствии с Соборным уложением 1649 г.',
       'Положение церкви и церковное право (XV—XVII вв.)',
       'Государство и право в России в XVIII веке',
       'Абсолютная монархия в России',
       'Государственный строй России при абсолютной монархии (конец XVII — первая четверть XVIII в.)',
       'Развитие государственной системы в XVIII в. (После Петра I)',
       'Общественный строй России в период абсолютной монархии в XVII — первой половины XVIII в. (дворянство и духовенство)',
       'Общественный строй России в период абсолютной монархии в XVII — первой половины XVIII в. (крестьяне и городское население)',
       'Взаимоотношения церкви и государства в XVIII в.',
       'Развитие права в России в конце XVII — первой половине XVIII в.',
       'Уголовное право в конце XVII — первой половине XVIII в.',
       'Гражданское, семейное и наследственное право в конце XVII — первой половине XVIII в.',
       'Судебный процесс в конце XVII — первой половине XVIII в.',
       'Губернская реформа 1775 г.', 'Судебная реформа 1775 г.',
       'Сословное законодательство второй половины XVIII в.',
       'Государство и право России в начале и первой половине XIX века',
       'Государственный строй России в период роста капиталистических отношений (начало XIX в.)',
       'Общественный строй в период роста капиталистических отношений (начало XIX в.)',
       'Управление зависимыми народами',
       'Развитие права в первой половине XIX в.',
       'Развитие уголовного права и судебного процесса в начале XIX в.',
       'Крестьянская реформа 1861 г.',
       'Земская и городская реформы второй половины XIX в.',
       'Судебная реформа 1864 г.',
       'Полицейская и военная реформы второй половины XIX в.',
       'Государство и право России в конце XIX — начале ХХ века',
       'Контрреформы 1880—1890-х гг.',
       'Развитие гражданского, наследственного и семейного права в конце XIX — начале XX в.',
       'Развитие уголовного права в конце XIX — начале XX в.',
       'Развитие судебного процесса в конце XIX — начале XX в.',
       'Становление конституционной монархии в России (конец XIX — начало XX в.)',
       'Политические партии и движения в период утверждения конституционной монархии',
       'Государственная дума', 'Аграрная реформа 1906 г.',
       'Развитие права в 1905—1917 гг.',
       'Государственный аппарат в годы Первой мировой войны',
       'Советское государство и право в 1917—1941 годах',
       'Россия после февральской революции 1917 г.',
       'Октябрьская революция 1917 г.',
       'Развитие советской государственной системы',
       'Деятельность Советского государства в области экономики',
       'Становление советской судебной системы',
       'Развитие системы советской милиции',
       'Формирование советского права', 'Конституция РСФСР 1918 г.',
       'Государственный аппарат в годы гражданской войны',
       'Переход к НЭПу', 'Судебная реформа 1922 г.',
       'Реформы правоохранительных органов',
       'Положение церкви в период 1917—1928 гг.', 'Образование СССР',
       'Развитие советского права в 1920-е гг.',
       'Развитие уголовного права и уголовного процесса в 1920-е гг.',
       'Советское государство в 1930—1940-е гг.',
       'Конституция СССР 1936 г.',
       'Развитие советского права в 1930-е гг.',
       'Советское государство и право во время Великой Отечественной войны и послевоенный период',
       'Государственный аппарат в период Великой Отечественной войны',
       'Советское право в годы Великой Отечественной войны',
       'Развитие государственной системы Советского Союза в 1945—1955 гг.',
       'Развитие советского права в 1945—1955 гг.',
       'Советское государство и право с середины 1950-х до середины 1980-х годов',
       'Советское государство в период либерализации общественных отношений (середина 1950-х — середина 1960-х гг.)',
       'Развитие советского права в 1960-е гг.',
       'Советское государство в период «застоя» (середина 1960-х — середина 1980-х гг.)',
       'Конституция СССР 1977 г.',
       'Развитие административного и уголовного права (середина 1960-х — середина 1980-х гг.)',
       'Развитие гражданского, семейного и трудового права (середина 1960-х — середина 1980-х гг.)',
       'Советское государство и право в период перестройки. Формирование современной российской государственности',
       'Советское государство в период перестройки (1985—1991 гг.)',
       'Распад СССР', 'Конституция Российской Федерации 1993 г.',
       'Новые издания по дисциплине «История отечественного государства и права» и смежным дисциплинам']

discipline_example_2 = "ЛИНЕЙНАЯ АЛГЕБРА"
topics_example_2 = ['Предисловие', 'Матрицы и определители', 'Теоретический курс',
       'Основные сведения о матрицах', 'Операции над матрицами',
       'Определители квадратных матриц', 'Свойства определителей',
       'Обратная матрица', 'Ранг матрицы', 'ПРАКТИКУМ',
       'Действия с матрицами', 'Определители квадратных матриц',
       'Обратная матрица', 'Ранг матрицы',
       'Задачи с экономическим содержанием',
       'Контрольные задания по главе 1 «Матрицы и определители»',
       'Тест 1', 'Системы линейных уравнений', 'Теоретический курс',
       'Основные понятия и определения',
       'Система n линейных уравнений с n переменными. Метод обратной матрицы и формулы Крамера',
       'Метод Гаусса', 'Система m линейных уравнений с n переменными',
       'Простейшие матричные уравнения',
       'Системы линейных однородных уравнений. Фундаментальная система решений',
       'Модель Леонтьева — модель многоотраслевой экономики (балансовый анализ)',
       'ПРАКТИКУМ', 'Система n линейных уравнений с n переменными',
       'Система m линейных уравнений с n переменными. Метод Жордана — Гаусса. Фундаментальная система решений',
       'Модель Леонтьева — модель многоотраслевой экономики',
       'Контрольные задания по главе 2 «Системы линейных уравнений»',
       'Тест 2', 'Элементы матричного анализа', 'Теоретический курс',
       'Векторы на плоскости и в пространстве',
       'Понятия n-мерного вектора и векторного пространства',
       'Размерность и базис векторного пространства. Изоморфизм',
       'Переход к новому базису', 'Линейные подпространства',
       'Евклидово пространство', 'Ортогональное дополнение',
       'Линейные операторы',
       'Образ и ядро, ранг и дефект линейного оператора',
       'Собственные векторы и собственные значения линейного оператора',
       'Квадратичные формы',
       'Приведение квадратичной формы к каноническому виду ортогональным преобразованием',
       'Закон инерции квадратичных форм. Знакоопределенные квадратичные формы',
       'Линейная модель обмена. Понятие о теореме Фробениуса — Перрона',
       'ПРАКТИКУМ', 'Векторы на плоскости и в пространстве',
       'Векторные пространства',
       'Линейные подпространства. Евклидовы пространства',
       'Линейные операторы',
       'Собственные векторы и собственные значения линейного оператора (матрицы)',
       'Квадратичные формы',
       'Контрольные задания по главе 3 «Элементы матричного анализа»',
       'Тест 3', 'Элементы аналитической геометрии', 'Теоретический курс',
       'Системы координат. Простейшие задачи',
       'Уравнение линии на плоскости', 'Уравнение прямой',
       'Условия параллельности и перпендикулярности прямых. Расстояние от точки до прямой',
       'Окружность и эллипс', 'Гипербола и парабола',
       'Полярные координаты', 'Плоскость и прямая в пространстве',
       'Поверхности второго порядка в пространстве',
       'Выпуклые множества точек',
       'Геометрический смысл решений неравенств и систем неравенств',
       'ПРАКТИКУМ', 'Простейшие задачи. Уравнение прямой на плоскости',
       'Кривые второго порядка', 'Полярные координаты',
       'Плоскость и прямая в пространстве',
       'Геометрическое решение неравенств и систем неравенств',
       'Контрольные задания по главе 4 «Элементы аналитической геометрии»',
       'Тест 4', 'Комплексные числа. Многочлены', 'Теоретический курс',
       'Арифметические операции над комплексными числами. Комплексная плоскость',
       'Тригонометрическая и показательная формы комплексного числа',
       'Многочлены', 'ПРАКТИКУМ', 'Действия над комплексными числами',
       'Разложение многочленов на множители',
       'Контрольные задания по главе 5 «Комплексные числа. Многочлены»',
       'Тест 5', 'Линейное программирование', 'Теоретический курс',
       'Примеры задач линейного программирования',
       'Общая задача линейного программирования',
       'Свойства задачи линейного программирования',
       'Геометрический метод решения задач линейного программирования',
       'Симплексный метод и его геометрическая интерпретация',
       'Определение максимума (минимума) линейной функции',
       'Определение первоначального допустимого базисного решения',
       'Особые случаи симплексного метода', 'Симплексные таблицы',
       'Понятие об M‑методе (метод искусственного базиса)',
       'Экономическая интерпретация задачи, двойственной задаче об использовании ресурсов. Свойства двойственных задач',
       'Первая и вторая теоремы двойственности',
       'Объективно обусловленные оценки и их смысл. Третья терема двойственности',
       'Экономико‑математическая модель транспортной задачи',
       'Нахождение первоначального базисного распределения поставок',
       'Критерий оптимальности базисного распределения поставок',
       'Распределительный метод решения транспортной задачи',
       'Открытая модель транспортной задачи. Понятие двойственной транспортной задачи',
       'ПРАКТИКУМ',
       'Задачи линейного программирования и методы их решения',
       'Двойственные задачи', 'Транспортная задача',
       'Контрольные задания по главе 6 «Линейное программирование»',
       'Тест 6', 'КОНТРОЛЬНЫЕ ЗАДАНИЯ И ТЕСТЫ',
       'Учебно-тренировочные тесты по дисциплине «Линейная алгебра»',
       'Итоговые контрольные задания по дисциплине «Линейная алгебра»',
       'Итоговый тест', 'Литература',
       'Новинки по линейной алгебре и смежным дисциплинам', 'Ответы',
       'Предметный указатель']

prompt = f"Generate the list of topics for discipline titled {discipline}. It is a college-level course for math students. Use the following examples as a guide. Respond in Russian.\n\nExample 1: {discipline_example_1}\nTopics: {topics_example_1}\n\nExample 2: {discipline_example_2}\nTopics: {topics_example_2}\n\nDiscipline: {discipline}\nTopics:"

response = client.models.generate_content(
    model="gemini-2.5-flash",
    contents=[prompt],
)
#%%
# extract the generated topics
text = response.text
start = text.find('[')
end = text.rfind(']')
list_text = text[start:end+1]
extracted_list = ast.literal_eval(list_text)

# ensure a list of strings
generated_topics = [str(x) for x in extracted_list]
print(len(generated_topics))
generated_topics[:10]

#%%
response = client.models.embed_content(
        model="gemini-embedding-001",
        contents=', '.join(generated_topics),
        config=types.EmbedContentConfig(output_dimensionality=768))
embedding = np.array(response.embeddings[0].values, dtype=float)
#%%
# load back
npz_path = os.path.join("course_embeddings", "course_embeddings.npz")
with np.load(npz_path) as data:
    loaded_ids = data["ids"].astype(int)
    vecs = data["embeddings"].astype(float)

print("loaded:", loaded_ids.shape, "ids,", vecs.shape, "embeddings")

# build dict for easy lookup
embeddings_by_id = {int(i): vec for i, vec in zip(loaded_ids, vecs)}

# normalized matrix for fast cosine queries
norms = np.linalg.norm(vecs, axis=1, keepdims=True)
norms[norms == 0] = 1.0
vecs_norm = vecs / norms

def top_k_similar(embedding, k):
    sims = vecs_norm @ embedding
    top_idx = np.argpartition(-sims, range(k))[:k]
    top_sorted = top_idx[np.argsort(-sims[top_idx])]
    return [(int(loaded_ids[i]), float(sims[i])) for i in top_sorted]

most_similar_ids = [id for (id, score) in top_k_similar(embedding, k=5)]

#%%
courses_df = pd.read_csv(
    'project_subjects.csv',
    sep=';',
    encoding='utf-8-sig',
    na_values=['NULL'],
    engine='python')

#%%
# show the most similar courses
top_k = top_k_similar(embedding, k=5)
sim_dict = {int(i): float(s) for i, s in top_k}
col_name = f"similarity to {discipline}"

# ensure project_id can be matched as int
courses_df['_project_id_int'] = courses_df['project_id'].astype(int)
out_df = (
    courses_df[courses_df['_project_id_int'].isin(sim_dict.keys())]
    [['project_id', 'project_name', 'fname']]
    .drop_duplicates()
    .copy()
)
out_df[col_name] = out_df['project_id'].astype(int).map(sim_dict)

# clean up helper column if needed
courses_df.drop(columns=['_project_id_int'], inplace=True)
out_df = out_df.sort_values(by=col_name, ascending=False)
out_df

# %%
for i in range(len(out_df)):
    id = out_df.iloc[i]['project_id']
    topics = ', '.join(courses_df.loc[courses_df.project_id == id, 'subject_short_name'].dropna().astype(str).tolist())

    prompt = f"""Given the course title and topics, determine if this course can be used to teach '{discipline}' in a college course. Be strict: if in doubt, answer "Нет". The course might contain many topics, but as long as it covers the core topics of '{discipline}', it is acceptable. Respond in Russian with a short explanation.

    Respond ONLY with a single valid JSON object (no extra text). Schema:
    {{
    "explanation": "<short explanation in Russian>",
    "answer": "Да" or "Нет",
    }}

    Course Title: {out_df.iloc[i]['project_name']}
    Topics: {topics}
"""

    response = client.models.generate_content(
        model="gemini-2.5-flash",
        contents=[prompt],
    )

    print(f"Course ID: {id}, Title: {out_df.iloc[i]['project_name']}")
    # robustly extract a single JSON object from the model response
    try:
        text = response.text.strip()
        start = text.find('{')
        end = text.rfind('}')
        parsed = json.loads(text[start:end+1])
    except (json.JSONDecodeError, ValueError) as e:
        print("Failed to parse JSON:", e)
        parsed = {"answer": "Ошибка", "explanation": "Не удалось распарсить ответ модели."}
    print(parsed.get('answer'))
    print(parsed.get('explanation'))
    print()
